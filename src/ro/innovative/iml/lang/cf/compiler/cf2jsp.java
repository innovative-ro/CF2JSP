/**
 * Copyright (c) 2006 - present Innovative Systems SRL
 * Copyright (c) 2006 - present Ovidiu Podisor ovidiu.podisor@innodocs.com
 * 
 * Authors: Ovidiu Podisor and members of the
 *          IML lab at West University Timisoara (www.uvt.ro)
 * 
 * This file is part of the CF2JSP project.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
 
package ro.innovative.iml.lang.cf.compiler;

import java.awt.Dimension;
import java.io.*;
import java.util.Properties;

import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.TreeSelectionModel;

import ro.innovative.iml.lang.cf.node.*;

public class cf2jsp {

	private static final String fileSep = System.getProperty("file.separator");

	private static String cfProjectPath;

	private static String currentFile;

	public static String getCurrentFile() {
		return currentFile;
	}

	public static void main(String[] args) {
		String fn = args[0];
		WarningInfo.setCount(0);
		if (new File(fn).isDirectory()) {
			cfProjectPath = new File(fn).getAbsolutePath();
			createWEBINF(cfProjectPath);
			getFilesInPath(cfProjectPath, ".cfm");
		} else {
			int i = fn.lastIndexOf(".cfm");
			if (i == -1 || i != fn.length() - 4)
				System.out.println("Input file must have 'cfm' extension.");
			else {
				String ofn = fn.substring(0, i) + ".jsp";
				translateCF(fn, ofn);
				javax.swing.SwingUtilities.invokeLater(new Runnable() {
					public void run() {
						createAndShowGUI();
					}
				});
			}
		}
		System.out.println(succ + " out of " + total
				+ " file(s) translated succesfully.");
		System.out.println(WarningInfo.getCount() + " warning(s).");
	}

	private static void createWEBINF(String cfProjectPath) {
		try {
			File webinf = new File(cfProjectPath + fileSep + "WEB-INF");
			webinf.mkdir();
			File webinf_tld = new File(webinf.getAbsolutePath() + fileSep
					+ "tld");
			webinf_tld.mkdir();
			File metainf = new File(cfProjectPath + fileSep + "META-INF");
			metainf.mkdir();
			File webinf_config = new File(webinf.getAbsolutePath() + fileSep
					+ "config");
			webinf_config.mkdir();
			File cfide = new File(cfProjectPath + fileSep + "cfide");
			cfide.mkdir();
			File cfide_jstree = new File(cfide.getAbsolutePath() + fileSep
					+ "jstree");
			cfide_jstree.mkdir();

			String context = "/Test";
			String datasourceName = "";
			String jdbcDriverClass = "";
			String dbURL = "";
			String dbUser = "";
			String dbPass = "";

			Properties props = new Properties();
			props.load(new FileInputStream("iml.properties"));
			context = props.getProperty("tomcatapp_context");
			datasourceName = props.getProperty("datasource_name");
			jdbcDriverClass = props.getProperty("jdbc_driver_class");
			dbURL = props.getProperty("db_url");
			dbUser = props.getProperty("db_user");
			dbPass = props.getProperty("db_pass");

			// // /WEB-INF/tld/cftags.tld
			// FileInputStream fis = new FileInputStream(new
			// File("web/WEB-INF/tld/cftags.tld"));
			// FileOutputStream fos = new FileOutputStream(new
			// File(cfProjectPath +
			// "/WEB-INF/tld/cftags.tld"));
			// byte[] buf = new byte[1024];
			int i = 0;
			//
			// try {
			// while ((i = fis.read(buf)) != -1)
			// fos.write(buf, 0, i);
			// fis.close();
			// fos.close();
			// } catch (IOException e) {
			// e.printStackTrace();
			// }
			//
			// // /WEB-INF/tld/cfoperators.tld
			// fis = new FileInputStream(new
			// File("web/WEB-INF/tld/cfoperators.tld"));
			// fos = new FileOutputStream(new File(cfProjectPath +
			// "/WEB-INF/tld/cfoperators.tld"));
			// i = 0;
			//
			// try {
			// while ((i = fis.read(buf)) != -1)
			// fos.write(buf, 0, i);
			// fis.close();
			// fos.close();
			// } catch (IOException e) {
			// e.printStackTrace();
			// }

			// /WEB-INF/tld/cffunctions.tld
			PrintWriter pw = new PrintWriter(cfProjectPath
					+ "/WEB-INF/tld/cffunctions.tld");

			pw.println("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>");
			pw.println("\n<!-- This file is autogenerated. Do not edit. -->\n");
			pw.println("<taglib>");
			pw.println("\t<tlibversion>1.0</tlibversion>");
			pw.println("\t<jspversion>1.1</jspversion>\n");
			for (i = 0; i < CFFuncInfo.FUNCS.length; i++) {
				writeFunc(pw, CFFuncInfo.FUNCS[i].getName().toLowerCase(),
						CFFuncInfo.FUNCS[i].getName(), CFFuncInfo.FUNCS[i]
								.getMinPar(), CFFuncInfo.FUNCS[i]
								.getClassName(), CFFuncInfo.FUNCS[i]
								.isPageContext());
				int j = CFFuncInfo.FUNCS[i].getMinPar() + 1;
				while (j <= CFFuncInfo.FUNCS[i].getMaxPar()) {
					writeFunc(pw, (CFFuncInfo.FUNCS[i].getName() + "_" + j)
							.toLowerCase(), CFFuncInfo.FUNCS[i].getName(), j,
							CFFuncInfo.FUNCS[i].getClassName(),
							CFFuncInfo.FUNCS[i].isPageContext());
					j++;
				}
			}
			pw.println("</taglib>");
			pw.close();

			// /META-INF/context.xml
			pw = new PrintWriter(cfProjectPath + "/META-INF/context.xml");
			pw.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
			pw.println("<Context path=\"" + context + "\" docBase=\""
					+ context.substring(1)
					+ "\" debug=\"5\" reloadable=\"true\" >");
			pw.println();
			if (!datasourceName.equals("")) {
				pw.println("<Resource name=\"" + datasourceName
						+ "\" auth=\"Container\"");
				pw
						.println("	type=\"javax.sql.DataSource\" maxActive=\"100\" maxIdle=\"30\"");
				pw.println("	maxWait=\"10000\" username=\"" + dbUser
						+ "\" password=\"" + dbPass + "\"");
				pw.println("	driverClassName=\"" + jdbcDriverClass + "\"");
				pw.println("	url=\"" + dbURL + "\" />");
				pw.println();
			}
			pw.println("</Context>");
			pw.close();

			// /WEB-INF/web.xml
			pw = new PrintWriter(cfProjectPath + "/WEB-INF/web.xml");
			pw.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
			pw
					.println("<web-app xmlns=\"http://java.sun.com/xml/ns/j2ee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd\" version=\"2.4\">");
			pw.println("<jsp-config>");
			pw.println("	<taglib>");
			pw.println("		<taglib-uri>cffunctions</taglib-uri>");
			pw
					.println("		<taglib-location>/WEB-INF/tld/cffunctions.tld</taglib-location>");
			pw.println("	</taglib>");
			pw.println("	<taglib>");
			pw.println("		<taglib-uri>cfoperators</taglib-uri>");
			pw
					.println("		<taglib-location>/WEB-INF/tld/cfoperators.tld</taglib-location>");
			pw.println("	</taglib>");
			pw.println("	<taglib>");
			pw.println("		<taglib-uri>cftags</taglib-uri>");
			pw
					.println("		<taglib-location>/WEB-INF/tld/cftags.tld</taglib-location>");
			pw.println("	</taglib>");
			pw.println("</jsp-config>");
			if (!datasourceName.equals("")) {
				pw.println("<resource-ref>");
				pw.println("	<description>DB Connection</description>");
				pw.println("	<res-ref-name>" + datasourceName
						+ "</res-ref-name>");
				pw.println("	<res-type>javax.sql.DataSource</res-type>");
				pw.println("	<res-auth>Container</res-auth>");
				pw.println("</resource-ref>");
			}
			pw.println("</web-app>");
			pw.close();

			// /cfide/jstree/cftree_files.jspf
			pw = new PrintWriter(cfProjectPath
					+ "/cfide/jstree/cftree_files.jspf");
			pw.println("<script type=\"text/javascript\" src=\"" + context
					+ "/cfide/jstree/cftree_script.js\"></script>");
			pw.println("<style type=\"text/css\">");
			pw
					.println("<%@ include file=\"/cfide/jstree/cftree_style.css\" %>");
			pw.println("</style>");
			pw.close();

			// /WEB-INF/config/cfproperties.properties
			pw = new PrintWriter(cfProjectPath
					+ "/WEB-INF/config/cfproperties.properties");
			pw.println("cftree_files_location = " + context + "/cfide/jstree/");
			pw.println("cftree_images_location = " + context
					+ "/cfide/jstree/img/");
			pw.println("cf_log_file = test.log");
			pw.println("cf_log_level = 2");
			pw.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	private static void writeFunc(PrintWriter pw, String name, String realName,
			int minPar, String className, boolean pc) {
		pw.println("\t<function>");
		pw.println("\t\t<name>" + name.toLowerCase() + "</name>");
		pw
				.print("\t\t<function-class>\n\t\t\tro.innovative.iml.lang.cf.basis.");
		pw.println(className);
		pw.println("\t\t</function-class>");
		pw.print("\t\t<function-signature>\n\t\t\tjava.lang.Object ");
		pw.print(realName + "(");
		for (int j = 0; j < minPar - 1; j++)
			pw.print("java.lang.Object, ");
		if (minPar != 0)
			pw.print("java.lang.Object");
		if (pc)
			pw.print(", javax.servlet.jsp.PageContext");
		pw.println(")");
		pw.println("\t\t</function-signature>");
		pw.println("\t</function>\n");
	}

	public static void getFilesInPath(String rootPath, String token) {
		String[] filesInRoot = null;
		try {
			File rootDir = new File(rootPath);
			filesInRoot = rootDir.list();
			for (int i = 0; i < filesInRoot.length; i++) {
				if (filesInRoot[i] != null) {
					File tempFile = new File(rootPath + fileSep
							+ filesInRoot[i]);
					if (tempFile.isDirectory()) {
						getFilesInPath(tempFile.getAbsolutePath(), token);
					} else if (tempFile.getAbsolutePath().endsWith(token)) {
						int j = tempFile.getAbsolutePath().lastIndexOf(".cfm");
						String ofn = tempFile.getAbsolutePath().substring(0, j)
								+ ".jsp";
						translateCF(tempFile.getAbsolutePath(), ofn);
					}
				}
			}
		} catch (Exception e) {
			System.out.println("Error in getFilesInPath: " + e + ": "
					+ rootPath);
		}
	}

	private static int total, succ;

	static DefaultMutableTreeNode root;

	private static void translateCF(String input, String output) {
		currentFile = output;

		System.out.println(input);

		total++;
		try {
			HtmlInc temp = new HtmlInc();
			temp.setValue(input);
			root = DocumentParser.getDocument(input);
			root = DocumentCompactor.compact(root);
			PrintWriter pw = new PrintWriter(new FileOutputStream(output), true);
			Node node = (Node) root.getUserObject();
			node.process(root.children(), pw);
			pw.close();
			succ++;
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	private static void createAndShowGUI() {
		JFrame frame = new JFrame("FrameDemo");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

		JTree tree = new JTree(root);
		tree.getSelectionModel().setSelectionMode(
				TreeSelectionModel.SINGLE_TREE_SELECTION);
		JScrollPane treeScroller = new JScrollPane(tree);
		treeScroller.setPreferredSize(new Dimension(900, 600));
		frame.getContentPane().add(treeScroller);

		frame.pack();
		frame.setVisible(true);
	}

}
